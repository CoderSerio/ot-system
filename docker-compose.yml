version: '3.2' #  选择 docker-compose 项目版本号
services:
  redis:
    build:
      context: ./DockerFiles/redis
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: redis # 容器名字
    restart: always # 开机自动重启
    ports:
      - '${REDIS_PORT}:6379'
    expose:
      - ${REDIS_PORT} # 暴露出端口 给links使用
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录

      #  command: "redis-server /usr/local/etc/redis/redis.conf" # 覆盖 Dockerfile 中的 cmd
    env_file:
      - .env

  mysql:
    # image: "mysql:5.7" #获取mysql 镜像
    build:
      context: ./DockerFiles/mysql
      dockerfile: Dockerfile
    container_name: mysql #mysql容器名称  docker run --name mysql
    restart: always # docker启动，当前容器必启动
    ports:
      - "${MYSQL_PORT}:3306" # 容器外部导出端口号:容器内部端口号
    expose:
      - ${MYSQL_PORT} # 暴露出端口 给links使用 
    # network_mode: "host"   #https://juejin.cn/post/6844904056301830152 
    networks:
      - app
    # networks:
    #   app:
    #     #当前服务器使用哪个桥
    #     ipv4_address: 172.16.0.3 # 具体ip 
    environment:
      #代表了给当前容器指定环境 相当于 docker run -e  MYSQL_ROOT_PASSWORD: "123456"
      # MYSQL_USER: 'root' # mysql 用户名
      # MYSQL_PASS: '123456' # mysql 密码
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # mysql 密码
      # volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      #   - /root/mysql_data:/var/lib/mysql # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    env_file:
      - .env

  server:
    # image: "node:14" #获取node镜像
    build:
      context: ./ot-system-server
      dockerfile: Dockerfile
    container_name: server #mysql容器名称  docker run --name mysql
    restart: always # docker启动，当前容器必启动
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}" # 容器外部导出端口号:容器内部端口号
    expose:
      - ${SERVER_PORT} # 暴露出端口 给links使用
    networks:
      - app
    # networks:
    #   app:
    #     #当前服务器使用哪个桥
    #     ipv4_address: 172.16.0.4 # 具体ip 
    links:
      - mysql
      - redis # 网络连接到redis中
    depends_on:
      - mysql
      - redis # 优先构建redis 容器， 在构建 server容器
      #启动服务
    command: "npm run prd:n"
      # 覆盖 Dockerfile 中的 cmd
      # environment:
      #   #代表了给当前容器指定环境 相当于 docker run -e  MYSQL_ROOT_PASSWORD: "123456"
      #   # MYSQL_USER: 'root' # mysql 用户名
      #   # MYSQL_PASS: '123456' # mysql 密码
      #   MYSQL_ROOT_PASSWORD: "123456" # mysql 密码
      # volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      #   - /root/mysql_data:/var/lib/mysql # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      #   # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    env_file:
      - .env

  client:
    build:
      context: ./ot-system-client
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: client # 容器名字
    restart: always # 开机自动重启
    ports:
      - '${CLIENT_PORT}:80' #   主机端口:容器端口
    expose:
      - ${CLIENT_PORT} # 暴露出端口 给links使用
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录
    links:
      - server # 网络连接到server中
      # depends_on:
      #   - server
      # 优先构建redis 容器， 在构建 server容器
      #  command: "redis-server /usr/local/etc/redis/redis.conf" # 覆盖 Dockerfile 中的 cmd
    volumes:
      # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      - client:/usr/share/nginx/html # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用    
    env_file:
      - .env

  admin:
    build:
      context: ./ot-system-admin
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: admin # 容器名字
    restart: always # 开机自动重启
    ports:
      - '${ADMIN_PORT}:80' #   主机端口:容器端口
    expose:
      - ${ADMIN_PORT} # 暴露出端口 给links使用
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录
    links:
      - server # 网络连接到server中
    # depends_on:
    #   - server
    # 优先构建redis 容器， 在构建 server容器
    #  command: "redis-server /usr/local/etc/redis/redis.conf" # 覆盖 Dockerfile 中的 cmd
    env_file:
      - .env
    volumes:
      # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      - admin:/usr/share/nginx/html # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用      

  entry:
    build:
      context: ./DockerFiles/nginx
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: entry # 容器名字
    restart: always # 开机自动重启
    ports:
      - '${ENTRY_PORT}:80' #   主机端口:容器端口
    expose:
      - ${ENTRY_PORT} # 暴露出端口 给links使用
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录
    links:
      - client # 网络连接到client中
      # - admin # 网络连接到admin中
    depends_on:
      - client
      # - admin
    # 优先构建redis 容器， 在构建 server容器
    #  command: "redis-server /usr/local/etc/redis/redis.conf" # 覆盖 Dockerfile 中的 cmd
    env_file:
      - .env
    # environment:
    #   - NGINX_HOST=foobar.com
    #   - NGINX_PORT=80
    #   - CLIENT=client

    # volumes:
    #   #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
    #   - ./DockerFiles/nginx/templates:/etc/nginx/templates
    #   - ./DockerFiles/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    # #   - admin:/usr/share/nginx/html # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    # # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用      
    # # '$$PORT' \ # 这里的PORT是容器内的PORT环境变量
    # command:
    #   - /bin/bash
    #   - -c
    #   - "envsubst '$${CLIENT}' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"

networks:
  # 固定ip设置
  # app:
  #   ipam:
  #     config:
  #       - subnet: 172.16.0.0/100
  # ip_range: 172.28.5.0/24
  #声明定义上面的网桥模式 默认创建的是bridge
  # 动态ip设置
  app:
    driver: bridge

# 容器和宿主机宗卷
volumes:
  client:
  admin:
