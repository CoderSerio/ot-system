version: '3.2' #  选择 docker-compose 项目版本号
services:
  redis:
    build:
      context: ./DockerFiles/redis
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: redis_container # 容器名字
    restart: always # 开机自动重启
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    expose:
      - ${REDIS_PORT} # 暴露出端口 给links使用
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录

      #  command: "redis-server /usr/local/etc/redis/redis.conf" # 覆盖 Dockerfile 中的 cmd
      # env_file:
      #   - ot-system-server/.env.production

  mysql:
    # image: "mysql:5.7" #获取mysql 镜像
    build:
      context: ./DockerFiles/mysql
      dockerfile: Dockerfile
    container_name: mysql_container #mysql容器名称  docker run --name mysql
    restart: always # docker启动，当前容器必启动
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}" # 容器外部导出端口号:容器内部端口号
    expose:
      - ${MYSQL_PORT} # 暴露出端口 给links使用 
    # network_mode: "host"   #https://juejin.cn/post/6844904056301830152 
    networks:
      - app
    # networks:
    #   app:
    #     #当前服务器使用哪个桥
    #     ipv4_address: 172.16.0.3 # 具体ip 
    environment:
      #代表了给当前容器指定环境 相当于 docker run -e  MYSQL_ROOT_PASSWORD: "123456"
      # MYSQL_USER: 'root' # mysql 用户名
      # MYSQL_PASS: '123456' # mysql 密码
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # mysql 密码
      # volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      #   - /root/mysql_data:/var/lib/mysql # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      # env_file:
      #   - ot-system-server/.env.production

  server:
    # image: "node:14" #获取node镜像
    build:
      context: ./ot-system-server
      dockerfile: Dockerfile
    container_name: server_container #mysql容器名称  docker run --name mysql
    restart: always # docker启动，当前容器必启动
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}" # 容器外部导出端口号:容器内部端口号
    expose:
      - ${SERVER_PORT} # 暴露出端口 给links使用
    networks:
      - app
    # networks:
    #   app:
    #     #当前服务器使用哪个桥
    #     ipv4_address: 172.16.0.4 # 具体ip 
    links:
      - mysql # 这里是 services 名称而不是容器名称  可以不用 links参数也是可以的
      - redis # 网络连接到redis services中
    depends_on:
      #优先启动mysql和redis
      - mysql # 这里是 services 名称而 不是容器名称
      - redis # 这里是 services 名称而 不是容器名称
      #启动服务
    command: "npm run prd:n"
      # 覆盖 Dockerfile 中的 cmd
      # environment:
      #   #代表了给当前容器指定环境 相当于 docker run -e  MYSQL_ROOT_PASSWORD: "123456"
      #   # MYSQL_USER: 'root' # mysql 用户名
      #   # MYSQL_PASS: '123456' # mysql 密码
      #   MYSQL_ROOT_PASSWORD: "123456" # mysql 密码
      # volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      #   - /root/mysql_data:/var/lib/mysql # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
      #   # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    # env_file:
    #   - ot-system-server/.env.production

  client:
    build:
      context: ./ot-system-client
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: client_container # 容器名字
    restart: always # 开机自动重启
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT} #   主机端口:容器端口
    expose:
      - ${CLIENT_PORT} # 暴露出端口 给links使用
    # environment:
    #   - NGINX_HOST=foobar.com
    #   - NGINX_PORT=80
    #   - CLIENT=client  
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录
    links:
      - server # 网络连接到server中
    depends_on:
      - server

    environment:
      # 是环境变量
      - CLIENT_ADDRESS=${CLIENT_ADDRESS} # client ip  
      - CLIENT_PORT=${CLIENT_PORT} # client 端口
      - CLIENT_SERVER_NAME=${CLIENT_SERVER_NAME} # client  SERVER
      - ADMIN_ADDRESS=${ADMIN_ADDRESS} # admin ip  
      - ADMIN_PORT=${ADMIN_PORT} # admin 端口
      - ENTRY_PORT=${ENTRY_PORT} #nginx 端口号
      - ENTRY_SERVER_NAME=${ENTRY_SERVER_NAME}

    volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      - ./ot-system-client/nginx/templates:/etc/nginx/templates
      - ./ot-system-client/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    #   - admin:/usr/share/nginx/html # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用      
    # envsubst 文档 https://www.baeldung.com/linux/envsubst-command
    command:
      - /bin/bash
      - -c
      - "envsubst '$$CLIENT_ADDRESS,$${CLIENT_PORT},$${CLIENT_SERVER_NAME},$${ADMIN_ADDRESS},$${ADMIN_PORT},$${ENTRY_PORT},$${ENTRY_SERVER_NAME}'  <  /etc/nginx/templates/default.conf.template  >  /etc/nginx/conf.d/default.conf  &&  exec nginx -g 'daemon off;'"

  admin:
    build:
      context: ot-system-admin
      dockerfile: Dockerfile
    # image: nginx # 镜像名称
    container_name: admin_container # 容器名字
    restart: always # 开机自动重启
    # env_file:
    #   - ot-system-admin/.env.production  
    ports:
      - '${ADMIN_PORT}:${ADMIN_PORT}' #   主机端口:容器端口
    expose:
      - ${ADMIN_PORT} # 暴露出端口 给links使用
      # environment:
      #   - ADMIN_PORT=${ADMIN_PORT}
      # - NGINX_PORT=80
      # - CLIENT=client
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录
    links:
      - server # 网络连接到server中
    depends_on:
      - server

    environment:
      # 是环境变量
      - CLIENT_ADDRESS=${CLIENT_ADDRESS} # client ip  
      - CLIENT_PORT=${CLIENT_PORT} # client 端口
      - CLIENT_SERVER_NAME=${CLIENT_SERVER_NAME} # client  SERVER
      - ADMIN_ADDRESS=${ADMIN_ADDRESS} # admin ip  
      - ADMIN_PORT=${ADMIN_PORT} # admin 端口
      - ADMIN_SERVER_NAME=${ADMIN_SERVER_NAME} # admin  server
      - ENTRY_PORT=${ENTRY_PORT} #nginx 端口号
      - ENTRY_SERVER_NAME=${ENTRY_SERVER_NAME}

    volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      - ./ot-system-admin/nginx/templates:/etc/nginx/templates
      - ./ot-system-admin/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    #   - admin:/usr/share/nginx/html # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用      
    # envsubst 文档 https://www.baeldung.com/linux/envsubst-command

    command:
      - /bin/bash
      - -c
      - "envsubst '$$CLIENT_ADDRESS,$$CLIENT_PORT,$$CLIENT_SERVER_NAME,$$ADMIN_ADDRESS,$$ADMIN_PORT,$$ADMIN_SERVER_NAME,$$ENTRY_PORT,$$ENTRY_SERVER_NAME'  <  /etc/nginx/templates/default.conf.template  >  /etc/nginx/conf.d/default.conf  &&  exec nginx -g 'daemon off;'"

  entry:
    build:
      context: ./DockerFiles/nginx
      dockerfile: Dockerfile
      # args:   #传递参数给buid
      #   - NGINX_HOST=${NGINX_HOST}
      # image: nginx # 镜像名称
    container_name: entry_container # 容器名字
    restart: always # 开机自动重启
    ports:
      - '${ENTRY_PORT}:${ENTRY_PORT}' #   主机端口:容器端口
    expose:
      - ${ENTRY_PORT} # 暴露出端口 给links使用
    networks:
      - app
      # networks:
      #   app:
      #     #当前服务器使用哪个桥
      #     ipv4_address: 172.16.0.2 # 具体ip 
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件
      # - ./log:/var/log/nginx  ###这里面放置日志
      # - ./html:/html         ###这里面放置项目目录
      # links:
      #   - client # 网络连接到client中
      # - admin # 网络连接到admin中
      # depends_on:
      # - client
      # - admin
      # 优先构建redis 容器， 在构建 server容器
      #  command: "redis-server /usr/local/etc/redis/redis.conf" # 覆盖 Dockerfile 中的 cmd
      # env_file:
      #   - .env
    environment:
      # 是环境变量
      - CLIENT_ADDRESS=${CLIENT_ADDRESS} # client ip  
      - CLIENT_PORT=${CLIENT_PORT} # client 端口
      - ADMIN_ADDRESS=${ADMIN_ADDRESS} # admin ip  
      - ADMIN_PORT=${ADMIN_PORT} # admin 端口
      - ENTRY_PORT=${ENTRY_PORT} #nginx 端口号
      - ENTRY_SERVER_NAME=${ENTRY_SERVER_NAME}
    volumes:
      #   # 代表给当前容器和宿主机指定数据卷， 类似于docker run -v
      - ./DockerFiles/nginx/templates:/etc/nginx/templates
      - ./DockerFiles/nginx/nginx.conf:/etc/nginx/conf.d/default.conf

    #   - admin:/usr/share/nginx/html # 绝对路径映射 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用
    # - ./data:/var/lib/mysql # 映射多个数据卷 类似于docker run -v 注意：docker-compose使用绝对路劲要求必须先创建才能使用      
    # envsubst 文档 https://www.baeldung.com/linux/envsubst-command
    command:
      - /bin/bash
      - -c
      - "envsubst '$$CLIENT_ADDRESS,$${CLIENT_PORT},$${ADMIN_ADDRESS},$${ADMIN_PORT},$${ENTRY_PORT},$${ENTRY_SERVER_NAME}'  <  /etc/nginx/templates/default.conf.template  >  /etc/nginx/conf.d/default.conf  &&  exec nginx -g 'daemon off;'"

networks:
  # 固定ip设置
  # app:
  #   ipam:
  #     config:
  #       - subnet: 172.16.0.0/100
  # ip_range: 172.28.5.0/24
  #声明定义上面的网桥模式 默认创建的是bridge
  # 动态ip设置
  app:
    driver: bridge

# 容器和宿主机宗卷
volumes:
  client:
  admin:
